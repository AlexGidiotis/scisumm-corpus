Citance Number: 1 | Reference Article:  W04-0308.txt | Citing Article:  W06-2927.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>Our bottom-up deterministic parser adopts Nivre's algorithm (Nivre, 2004) with a preprocessor.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>We then analyze the algorithm proposed in Nivre (2003) and show that, given the previous result, this algorithm is optimal from the point of view of incrementality.</S><S sid = NA ssid = NA>Incrementality In Deterministic Dependency Parsing</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 2 | Reference Article:  W04-0308.txt | Citing Article:  W06-2927.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>The parser is a bottom-up deterministic dependency parser based on the algorithm proposed by (Nivre, 2004).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Incrementality In Deterministic Dependency Parsing</S><S sid = NA ssid = NA>We then analyze the algorithm proposed in Nivre (2003) and show that, given the previous result, this algorithm is optimal from the point of view of incrementality.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 3 | Reference Article:  W04-0308.txt | Citing Article:  W06-2927.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>The main part of our dependency parser is based on Nivre' s algorithm (Nivre, 2004), in which the dependency relations are constructed by a bottom up deterministic schema.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Incrementality In Deterministic Dependency Parsing</S><S sid = NA ssid = NA>However, since there are no nonterminal symbols involved in dependency parsing, we also need to maintain a representation of the dependency graph being constructed during processing.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 4 | Reference Article:  W04-0308.txt | Citing Article:  P13-1014.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>If we consider transition-based dependency parsing (Nivre, 2008), the purely bottom-up strategy is implemented by the arc-standard model of Nivre (2004).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.</S><S sid = NA ssid = NA>Thus, we can say that the action performed by the Right-Reduce transition in the standard bottom-up algorithm is performed by a Right-Arc transition in combination with a subsequent Reduce transition in the arc-eager algorithm.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 5 | Reference Article:  W04-0308.txt | Citing Article:  W07-2217.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>Nivre (2004) investigated the issue of (strict ) incrementality for this type of parsers ;i.e., if at any point of the analysis the processed input forms one connected structure.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>In the strictest sense, we take incrementality to mean that, at any point during the parsing process, there is a single connected structure representing the analysis of the input consumed so far.</S><S sid = NA ssid = NA>By contrast, parsers that only partially disambiguate the input — partial parsing — are usually deterministic and construct the final analysis in one pass over the input (Abney, 1991; Daelemans et al., 1999).</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 6 | Reference Article:  W04-0308.txt | Citing Article:  W09-0509.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>Incrementality is not strict here in the sense of (Nivre, 2004), because sometimes more than one word is needed before parts of the frame are constructed and out put: into the right, for instance, needs to wait for a word like leg that completes the chunk.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>It seems fair to conclude that, although strict word-by-word incrementality is not possible in deterministic dependency parsing, the arc-eager algorithm can in practice be seen as a close approximation of incremental parsing.</S><S sid = NA ssid = NA>In a dependency structure, every word token is dependent on at most one other word token, usually called its head or regent, which means that the structure can be represented as a directed graph, with nodes representing word tokens and arcs representing dependency relations.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 7 | Reference Article:  W04-0308.txt | Citing Article:  W10-2927.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>The semantics of this transition system is described in (Nivre,2004).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Thus, we can say that the action performed by the Right-Reduce transition in the standard bottom-up algorithm is performed by a Right-Arc transition in combination with a subsequent Reduce transition in the arc-eager algorithm.</S><S sid = NA ssid = NA>Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 8 | Reference Article:  W04-0308.txt | Citing Article:  D11-1114.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>When restricted to these three transitions, the system is equivalent to the so-called stack-based arc-standard model of Nivre (2004).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Using the same representation of parser configurations as before, the arc-eager algorithm can be defined by the transitions given in Figure 5, where wi and wj are arbitrary word tokens (Nivre, 2003): the stack to the next input token wj, and pushes wj onto the stack.</S><S sid = NA ssid = NA>When restricted to sentences that are accepted by the parser, the degree of incrementality increases to 87.9%.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 9 | Reference Article:  W04-0308.txt | Citing Article:  D09-1127.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>This idea has been applied to constituency parsing, for example in Sagae and Lavie (2006), and we describe below a simple variant for dependency parsing similar to Yamada and Matsumoto (2003) and the arc-standard version of Nivre (2004).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Deterministic dependency parsing has recently been proposed as a robust and efficient method for syntactic parsing of unrestricted natural language text (Yamada and Matsumoto, 2003; Nivre, 2003).</S><S sid = NA ssid = NA>Since deterministic dependency parsing has previously been shown to be competitive in terms of parsing accuracy (Yamada and Matsumoto, 2003; Nivre et al., 2004), we believe that this is a promising approach for situations that require parsing to be robust, efficient and (almost) incremental.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 10 | Reference Article:  W04-0308.txt | Citing Article:  W08-2136.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>The MaltParser is a dependency parser generator, with three parsing algorithms: Nivre's arc standard, Nivre's arc eager (see Nivre (2004) for a comparison between the two Nivre algorithms), and Covington's (Covington, 2001).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Hence, in terms of what drives the parsing process, all algorithms discussed here correspond to bottom-up algorithms in context-free parsing.</S><S sid = NA ssid = NA>Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 11 | Reference Article:  W04-0308.txt | Citing Article:  W11-0328.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>The parsing algorithm is the arc-standard method (Nivre, 2004), which is briefly described in Section 2.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Defining incrementality is less straightforward for the arc-eager algorithm than for the standard bottom-up algorithm.</S><S sid = NA ssid = NA>Following Abney and Johnson (1991), we will call this arc-eager parsing, to distinguish it from the standard bottom-up strategy discussed in the previous section.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 12 | Reference Article:  W04-0308.txt | Citing Article:  W10-2005.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>These features are found to have high overall accuracy in the Nivre parser (Nivre, 2004) and in human sentence processing modeling (Boston et al, 2008) .</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Since deterministic dependency parsing has previously been shown to be competitive in terms of parsing accuracy (Yamada and Matsumoto, 2003; Nivre et al., 2004), we believe that this is a promising approach for situations that require parsing to be robust, efficient and (almost) incremental.</S><S sid = NA ssid = NA>In experiments reported in Nivre et al. (2004), a parsing accuracy of 85.7% (unlabeled attachment score) was achieved, using data from a small treebank of Swedish (Einarsson, 1976), divided into a training set of 5054 sentences and a test set of 631 sentences.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 13 | Reference Article:  W04-0308.txt | Citing Article:  W12-0701.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>In this paper, we propose a model based on Arc-Standard Transition System of Nivre (2004), which is known as an incremental greedy projective parsing model that parses sentences in linear time.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>In this paper, we have analyzed the potential for incremental processing in deterministic dependency parsing.</S><S sid = NA ssid = NA>Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 14 | Reference Article:  W04-0308.txt | Citing Article:  W12-0701.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>Actions in Arc-Standard Transition System (Nivre, 2004) clues to unsupervised parsing.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.</S><S sid = NA ssid = NA>Thus, we can say that the action performed by the Right-Reduce transition in the standard bottom-up algorithm is performed by a Right-Arc transition in combination with a subsequent Reduce transition in the arc-eager algorithm.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 15 | Reference Article:  W04-0308.txt | Citing Article:  S12-1073.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>We implement three transition-based dependency parsers with three different parsing algorithms: Nivre's arc standard, Nivre's arc eager (see Nivre (2004) for a comparison between the two Nivre algorithms), and Liang's dynamic algorithm (Huang and Sagae, 2010).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.</S><S sid = NA ssid = NA>Hence, in terms of what drives the parsing process, all algorithms discussed here correspond to bottom-up algorithms in context-free parsing.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 16 | Reference Article:  W04-0308.txt | Citing Article:  D07-1125.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>In this respect such a model is very restrictive and suffers from the pitfalls of the incremental processing (Nivre, 2004).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>In this paper, we have analyzed the potential for incremental processing in deterministic dependency parsing.</S><S sid = NA ssid = NA>Moreover, we have shown that in practical parsing, the algorithm performs incremental processing for the majority of input structures.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 17 | Reference Article:  W04-0308.txt | Citing Article:  N10-1115.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>This is in line with the Arc-Standard parsing strategy of shift-reduce dependency parsers (Nivre, 2004).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>In order to understand the constraints on incrementality in dependency parsing, we will begin by considering the most straightforward parsing strategy, i.e. left-to-right bottom-up parsing, which in this case is essentially equivalent to shift-reduce parsing with a context-free grammar in Chomsky normal form.</S><S sid = NA ssid = NA>Following Abney and Johnson (1991), we will call this arc-eager parsing, to distinguish it from the standard bottom-up strategy discussed in the previous section.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 18 | Reference Article:  W04-0308.txt | Citing Article:  P13-1104.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>There are other transition-based dependency parsing algorithms that take a similar approach; Nivre (2009) integrated a SWAP transition into Nivre's arc-standard algorithm (Nivre, 2004) and Fernandez Gonzalez and Gomez-Rodriguez (2012) integrated a buffer transition into Nivre's arc-eager algorithm to handle non-projectivity.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.</S><S sid = NA ssid = NA>Thus, we can say that the action performed by the Right-Reduce transition in the standard bottom-up algorithm is performed by a Right-Arc transition in combination with a subsequent Reduce transition in the arc-eager algorithm.</S> | Discourse Facet:  NA | Annotator: Automatic


