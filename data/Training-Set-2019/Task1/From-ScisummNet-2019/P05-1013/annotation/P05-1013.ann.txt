Citance Number: 1 | Reference Article:  P05-1013.txt | Citing Article:  W05-1505.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Recent work by Nivre and Nilsson introduces a technique where the projectivization transformation is encoded in the non-terminals of constituents during parsing (Nivre and Nilsson, 2005).</S> | Reference Offset:  ['65','73'] | Reference Text:  <S sid = 65 ssid = >More details on the parsing algorithm can be found in Nivre (2003).</S><S sid = 73 ssid = >More details on the memory-based prediction can be found in Nivre et al. (2004) and Nivre and Scholz (2004).</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 2 | Reference Article:  P05-1013.txt | Citing Article:  P08-1006.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Sagae and Tsujii (2007)'s dependency parser, based on a probabilistic shift-reduce algorithm extended by the pseudo-projective parsing technique (Nivre and Nilsson, 2005).</S> | Reference Offset:  ['0','65'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 65 ssid = >More details on the parsing algorithm can be found in Nivre (2003).</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 3 | Reference Article:  P05-1013.txt | Citing Article:  W10-1401.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque.</S> | Reference Offset:  ['0','104'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 104 ssid = >The overall parsing accuracy obtained with the pseudo-projective approach is still lower than for the best projective parsers.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 4 | Reference Article:  P05-1013.txt | Citing Article:  P12-3029.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005).</S> | Reference Offset:  ['0','2'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 2 ssid = >We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 5 | Reference Article:  P05-1013.txt | Citing Article:  W10-1403.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >It uses graph transformation to handle non-projective trees (Nivre and Nilsson, 2005).</S> | Reference Offset:  ['20','74'] | Reference Text:  <S sid = 20 ssid = >In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S><S sid = 74 ssid = >The first experiment uses data from two dependency treebanks.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 6 | Reference Article:  P05-1013.txt | Citing Article:  D08-1008.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >To simplify implementation, we instead opted for the pseudo-projective approach (Nivre and Nilsson, 2005), in which non projective links are lifted upwards in the tree to achieve projectivity, and special trace labels are used to enable recovery of the non projective links at parse time.</S> | Reference Offset:  ['0','104'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 104 ssid = >The overall parsing accuracy obtained with the pseudo-projective approach is still lower than for the best projective parsers.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 7 | Reference Article:  P05-1013.txt | Citing Article:  D07-1013.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Nivre and Nilsson (2005) showed how the restriction to projective dependency graphs could be lifted by using graph transformation techniques to preprocess training data and post-process parser output, so-called pseudo-projective parsing.</S> | Reference Offset:  ['0','109'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 109 ssid = >We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 8 | Reference Article:  P05-1013.txt | Citing Article:  D07-1119.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >For handling non-projective relations, Nivre and Nilsson (2005) suggested applying a preprocessing step to a dependency parser, which consists in lifting non-projective arcs to their head repeatedly, until the tree becomes pseudo-projective.</S> | Reference Offset:  ['0','37'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 37 ssid = >Here we use a slightly different notion of lift, applying to individual arcs and moving their head upwards one step at a time: Intuitively, lifting an arc makes the word wk dependent on the head wi of its original head wj (which is unique in a well-formed dependency graph), unless wj is a root in which case the operation is undefined (but then wj â€”* wk is necessarily projective if the dependency graph is well-formed).</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 9 | Reference Article:  P05-1013.txt | Citing Article:  N07-1050.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >The most popular strategy for capturing non projective structures in data-driven dependency parsing is to apply some kind of post-processing to the output of a strictly projective dependency parser, as in pseudo-projective parsing (Nivre and Nilsson, 2005), corrective modeling (Hall and Novak, 2005), or approximate non-projective parsing (McDonald and Pereira, 2006).</S> | Reference Offset:  ['0','109'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 109 ssid = >We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 10 | Reference Article:  P05-1013.txt | Citing Article:  W09-1207.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >We adopt the pseudo-projective approach introduced in (Nivre and Nilsson, 2005) to handle the non-projective languages including Czech, German and English.</S> | Reference Offset:  ['0','104'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 104 ssid = >The overall parsing accuracy obtained with the pseudo-projective approach is still lower than for the best projective parsers.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 11 | Reference Article:  P05-1013.txt | Citing Article:  E09-1034.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >However, just as it has been noted that most non-projective structures appearing in practice are only 'slightly' non projective (Nivre and Nilsson, 2005), we characterise a sense in which the structures appearing in tree banks can be viewed as being only 'slightly' ill-nested.</S> | Reference Offset:  ['2','6'] | Reference Text:  <S sid = 2 ssid = >We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.</S><S sid = 6 ssid = >However, this argument is only plausible if the formal framework allows non-projective dependency structures, i.e. structures where a head and its dependents may correspond to a discontinuous constituent.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 12 | Reference Article:  P05-1013.txt | Citing Article:  W09-1218.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >In order to avoid losing the benefits of higher-order parsing, we considered applying pseudo-projective transformation (Nivre and Nilsson, 2005).</S> | Reference Offset:  ['0','1'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 1 ssid = >In order to realize the full potential of dependency-based syntactic parsing, it is desirable to allow non-projective dependency structures.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 13 | Reference Article:  P05-1013.txt | Citing Article:  C08-1081.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Pseudo-projective parsing for recovering non projective structures (Nivre and Nilsson, 2005).</S> | Reference Offset:  ['0','2'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 2 ssid = >We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 14 | Reference Article:  P05-1013.txt | Citing Article:  C08-1081.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4).</S> | Reference Offset:  ['0','79'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 79 ssid = >In the first part of the experiment, dependency graphs from the treebanks were projectivized using the algorithm described in section 2.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 15 | Reference Article:  P05-1013.txt | Citing Article:  C08-1081.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Pseudo-projective parsing was proposed by Nivreand Nilsson (2005) as a way of dealing with non projective structures in a projective data-driven parser.</S> | Reference Offset:  ['0','109'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 109 ssid = >We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 16 | Reference Article:  P05-1013.txt | Citing Article:  C08-1081.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >We projectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r-h, where r is the original label and h is the label of the original head in the non-projective dependency graph.</S> | Reference Offset:  ['49','51'] | Reference Text:  <S sid = 49 ssid = >The baseline simply retains the original labels for all arcs, regardless of whether they have been lifted or not, and the number of distinct labels is therefore simply the number n of distinct dependency types.2 In the first encoding scheme, called Head, we use a new label dâ†‘h for each lifted arc, where d is the dependency relation between the syntactic head and the dependent in the non-projective representation, and h is the dependency relation that the syntactic head has to its own head in the underlying structure.</S><S sid = 51 ssid = >In the second scheme, Head+Path, we in addition modify the label of every arc along the lifting path from the syntactic to the linear head so that if the original label is p the new label is pâ†“.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 17 | Reference Article:  P05-1013.txt | Citing Article:  D11-1006.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005).</S> | Reference Offset:  ['0','2'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 2 ssid = >We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 18 | Reference Article:  P05-1013.txt | Citing Article:  P11-2121.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases.</S> | Reference Offset:  ['0','14'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 14 ssid = >While the proportion of sentences containing non-projective dependencies is often 15â€“25%, the total proportion of non-projective arcs is normally only 1â€“2%.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 19 | Reference Article:  P05-1013.txt | Citing Article:  E06-1010.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >It should be noted that the proportion of lost dependencies is about twice as high as the proportion of dependencies that are non-projective in themselves (Nivre and Nilsson, 2005).</S> | Reference Offset:  ['14','92'] | Reference Text:  <S sid = 14 ssid = >While the proportion of sentences containing non-projective dependencies is often 15â€“25%, the total proportion of non-projective arcs is normally only 1â€“2%.</S><S sid = 92 ssid = >Evaluation metrics used are Attachment Score (AS), i.e. the proportion of tokens that are attached to the correct head, and Exact Match (EM), i.e. the proportion of sentences for which the dependency graph exactly matches the gold standard.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 20 | Reference Article:  P05-1013.txt | Citing Article:  D07-1111.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >The resulting algorithm is projective, and nonprojectivity is handled by pseudo-projective transformations as described in (Nivre and Nilsson, 2005).</S> | Reference Offset:  ['0','79'] | Reference Text:  <S sid = 0 ssid = >Pseudo-Projective Dependency Parsing</S><S sid = 79 ssid = >In the first part of the experiment, dependency graphs from the treebanks were projectivized using the algorithm described in section 2.</S> | Discourse Facet:  NA | Annotator: Automatic


