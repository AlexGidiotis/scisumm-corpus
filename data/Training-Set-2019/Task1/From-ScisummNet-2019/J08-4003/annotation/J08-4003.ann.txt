Citance Number: 1 | Reference Article:  J08-4003.txt | Citing Article:  P14-1126.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>It is based on the transition-based dependency parsing paradigm (Nivre, 2008).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>A stack-based transition system is a quadruple S = (C, T, cs, Ct), where Nivre Deterministic Incremental Dependency Parsing Transitions for the arc-standard, stack-based parsing algorithm.</S><S sid = NA ssid = NA>Of the algorithms described in this article, the arc-eager stack-based algorithm is essentially the algorithm proposed for unlabeled dependency parsing in Nivre (2003), extended to labeled dependency parsing in Nivre, Hall, and Nilsson (2004), and most fully described in Nivre (2006b).</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 2 | Reference Article:  J08-4003.txt | Citing Article:  P13-1014.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>If we consider transition-based dependency parsing (Nivre, 2008), the purely bottom-up strategy is implemented by the arc-standard model of Nivre (2004).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>The approach was extended to labeled dependency parsing by Nivre, Hall, and Nilsson (2004) (for Swedish) and Nivre and Scholz (2004) (for English), using a different parsing algorithm first presented in Nivre (2003).</S><S sid = NA ssid = NA>The first strictly incremental parser of this kind was described in Nivre (2003) and used for classifier-based parsing of Swedish by Nivre, Hall, and Nilsson (2004) and English by Nivre and Scholz (2004).</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 3 | Reference Article:  J08-4003.txt | Citing Article:  D11-1114.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>The above work on transition-based parsing has focused on greedy algorithms set in a statistical framework (Nivre, 2008).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>In this article, we have introduced a formal framework for deterministic incremental dependency parsing, where parsing algorithms can be defined in terms of transition systems that are deterministic only together with an oracle for predicting the next transition.</S><S sid = NA ssid = NA>A stack-based transition system is a quadruple S = (C, T, cs, Ct), where Nivre Deterministic Incremental Dependency Parsing Transitions for the arc-standard, stack-based parsing algorithm.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 4 | Reference Article:  J08-4003.txt | Citing Article:  D11-1114.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>For a more detailed presentation of this subject, we refer the reader to Nivre (2008).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>We use the notation βc and Ac to refer to the value of β and A, respectively, in a configuration c; we also use |β |to refer to the length of β (i.e., the number of nodes in the buffer) and we use [ ] to denote an empty buffer.</S><S sid = NA ssid = NA>A dependency graph G = (V, A) is well-formed if and only if: We will refer to conditions 1–3 as ROOT, SINGLE-HEAD, and ACYCLICITY, respectively.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 5 | Reference Article:  J08-4003.txt | Citing Article:  D10-1069.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>Quite impressively, models based on deterministic shift-reduce parsing algorithms are able to rival the other computationally more expensive models (see Nivre (2008) and references therein for more details).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Feature models.</S><S sid = NA ssid = NA>Although different types of parsing algorithms, feature models, and classifiers have been used for deterministic dependency parsing, there are very few studies that compare the impact of different components.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 6 | Reference Article:  J08-4003.txt | Citing Article:  P11-1159.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>Nivre (2008) reports experiments on Arabic parsing using his MaltParser (Nivre et al, 2007), trained on the PADT.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Altogether it has now been applied to 19 different languages (Nivre et al. 2006, 2007; Hall et al.</S><S sid = NA ssid = NA>On the whole, however, the four algorithms investigated in this article give very similar performance both in terms of accuracy and efficiency, and several previous studies have shown that both the stack-based and the list-based algorithms can achieve state-of-the-art accuracy together with properly trained classifiers (Nivre et al. 2006; Nivre 2007; Hall et al.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 7 | Reference Article:  J08-4003.txt | Citing Article:  P11-1159.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>We use McNemar's statistical significance test as implemented by Nilsson and Nivre (2008), and denote p < 0.05 and p < 0.01 with+ and ++, respectively.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>However, given the large amount of data, some of the differences are nevertheless statistically significant (according to McNemar’s test, α = .05).</S><S sid = NA ssid = NA>We use the notation βc and Ac to refer to the value of β and A, respectively, in a configuration c; we also use |β |to refer to the length of β (i.e., the number of nodes in the buffer) and we use [ ] to denote an empty buffer.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 8 | Reference Article:  J08-4003.txt | Citing Article:  P11-1159.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>Nivre (2008) reports that non-projective and pseudo projective algorithms outperform the eager projective algorithm in MaltParser, but our training data did not contain any non-projective dependencies.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Moreover, when the projective algorithms are used to implement pseudo-projective parsing, they sometimes become less efficient in parsing (but not in learning) than the non-projective list-based algorithm.</S><S sid = NA ssid = NA>Moreover, when the projective algorithms are used to implement pseudo-projective parsing, they sometimes become less efficient in parsing (but not in learning) than the non-projective list-based algorithm.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 9 | Reference Article:  J08-4003.txt | Citing Article:  P11-1159.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>The Nivre standard algorithm is also reported to do better on Arabic, but in a preliminary experimentation, it did similarly or slightly worse than the eager one, perhaps due to high percentage of right branching (left headed structures) in our Arabic training set, an observation already noted in Nivre (2008).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>However, it must also be pointed out that the highest percentage of all is found in Arabic (82.9%), which means that a high proportion of left-headed structures may be a necessary but not sufficient condition for the arc-eager strategy to work better than the arc-standard strategy.</S><S sid = NA ssid = NA>In order for this to be the case, there must first of all be a significant proportion of left-headed structures in the data.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 10 | Reference Article:  J08-4003.txt | Citing Article:  D11-1138.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>Transition-based: An implementation of the transition-based dependency parsing framework (Nivre, 2008) using an arc-eager transition strategy and are trained using the perceptron algorithm as in Zhang and Clark (2008) with a beam size of 8.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>A stack-based transition system is a quadruple S = (C, T, cs, Ct), where Nivre Deterministic Incremental Dependency Parsing Transitions for the arc-standard, stack-based parsing algorithm.</S><S sid = NA ssid = NA>In particular, the arc-eager strategy inherent not only in the arc-eager, stack-based algorithm but also in both versions of the list-based algorithm appears to be suboptimal for some languages and syntactic representations.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 11 | Reference Article:  J08-4003.txt | Citing Article:  P11-1045.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>Deterministic algorithms for dependency parsing exist that can extract syntactic dependency structure very quickly (Nivre, 2008), but this approach is often undesirable as constituent parsers are more accurate and more adaptable to new domains (Petrov et al, 2010).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Dependency Treebank (Hajiˇc et al. 2001; B¨ohmov´a et al.</S><S sid = NA ssid = NA>Algorithms for Deterministic Incremental Dependency Parsing</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 12 | Reference Article:  J08-4003.txt | Citing Article:  P12-1069.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>To prove the correctness of the system in Figure 1 for the projective dependency graph, we use the proof strategy of (Nivre, 2008a).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Proof 6 Same as Proof 3.</S><S sid = NA ssid = NA>As an illustration, Figure 8 shows the transition sequence needed to parse the Czech sentence in Figure 1, which has a non-projective dependency graph.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 13 | Reference Article:  J08-4003.txt | Citing Article:  D12-1133.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>Following Nivre (2008), we define a transition system for dependency parsing as a quadruple S= (C, T, cs, Ct), where 1. C is a set of configurations, 2. T is a set of transitions, each of which is a (partial) function t : C → C, 3. cs is an initialization function, mapping a sentence x to a configuration c ∈ C, 4. Ct ⊆ C is a set of terminal configurations.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>An oracle for a transition system S = (C, T, cs, Ct) is a function o : C - 4T.</S><S sid = NA ssid = NA>Let S = (C, T, cs, Ct) be a transition system for dependency parsing.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 14 | Reference Article:  J08-4003.txt | Citing Article:  D12-1133.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>This definition of transition sequence differs from that of Nivre (2008) but is equivalent and suits our presentation better.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>Depending on the nature of a transition system S, there may not be a transition sequence for every sentence, or there may be more than one such sequence.</S><S sid = NA ssid = NA>Arc-eager transition sequence for the English sentence in Figure 2.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 15 | Reference Article:  J08-4003.txt | Citing Article:  P10-2035.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>In this paper, we assume that the resulting dependency graph for a sentence is well-formed and projective (Nivre, 2008).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>A dependency graph G = (V, A) is well-formed if and only if: We will refer to conditions 1–3 as ROOT, SINGLE-HEAD, and ACYCLICITY, respectively.</S><S sid = NA ssid = NA>Nivre Deterministic Incremental Dependency Parsing Proof 4 To show the soundness of the algorithm, we show that the dependency graph defined by the initial configuration, Gc0(x) = (Vx, 0), is a projective dependency forest, and that every transition preserves this property.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 16 | Reference Article:  J08-4003.txt | Citing Article:  P10-2035.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>studies taking data-driven approaches, by (Kudo and Matsumoto, 2002), (Yamada and Matsumoto,2003), and (Nivre, 2003), the deterministic incremental parser was generalized to a state transition system in (Nivre, 2008).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>The algorithms of Kudo and Matsumoto (2002), Yamada and Matsumoto (2003), and Nivre (2003, 2006b) all belong to this family.</S><S sid = NA ssid = NA>The approach of deterministic classifier-based parsing was first proposed for Japanese by Kudo and Matsumoto (2002) and for English by Yamada and Matsumoto (2003).</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 17 | Reference Article:  J08-4003.txt | Citing Article:  N12-1052.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>All of the parsing experiments reported in this study are based on the transition-based dependency parsing paradigm (Nivre, 2008).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>A stack-based transition system is a quadruple S = (C, T, cs, Ct), where Nivre Deterministic Incremental Dependency Parsing Transitions for the arc-standard, stack-based parsing algorithm.</S><S sid = NA ssid = NA>Nivre Deterministic Incremental Dependency Parsing configuration where i is on the top of the stack).</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 18 | Reference Article:  J08-4003.txt | Citing Article:  D11-1017.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>The core dependency parser we use is an implementation of a transition-based dependency parser using an arc-eager transition strategy (Nivre, 2008).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>■ The transition set T for the arc-eager, stack-based parser is defined in Figure 5 and contains four types of transitions: 1.</S><S sid = NA ssid = NA>The transition set T for the arc-standard, stack-based parser is defined in Figure 3 and contains three types of transitions: Arc-standard transition sequence for the English sentence in Figure 2.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 19 | Reference Article:  J08-4003.txt | Citing Article:  P14-1125.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>There are two dominant transition based dependency parsing systems, namely the arc-standard and the arc-eager parsers (Nivre, 2008).</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>A stack-based transition system is a quadruple S = (C, T, cs, Ct), where Nivre Deterministic Incremental Dependency Parsing Transitions for the arc-standard, stack-based parsing algorithm.</S><S sid = NA ssid = NA>We will now define two such systems, which we call arc-standard and arc-eager, respectively, adopting the terminology of Abney and Johnson (1991).</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 20 | Reference Article:  J08-4003.txt | Citing Article:  P14-1125.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset:  NA | Citation Text:  <S sid = NA ssid = NA>Nivre (2008) gave a systematic description of the arc-standard and arc-eager algorithms, currently two popular transition-based parsing methods for word-level dependency parsing.</S> | Reference Offset:  NA | Reference Text:  <S sid = NA ssid = NA>A stack-based transition system is a quadruple S = (C, T, cs, Ct), where Nivre Deterministic Incremental Dependency Parsing Transitions for the arc-standard, stack-based parsing algorithm.</S><S sid = NA ssid = NA>Transitions Transitions for the arc-eager, stack-based parsing algorithm.</S> | Discourse Facet:  NA | Annotator: Automatic


