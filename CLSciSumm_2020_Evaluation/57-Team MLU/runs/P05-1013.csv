Citance Number,Reference Article,Citing Article,Citation Marker Offset,Citation Offset,Citation Text,Reference Offset,Reference Text,Discourse Facet
1,P05-1013,W05-1505,0.0,0.0,"Recent work by Nivre and Nilsson introduces a technique where the projectivization transformation is encoded in the non-terminals of constituents during parsing (Nivre and Nilsson, 2005)",['26'],"<S sid =""26"" ssid = ""22"">In section 2 we introduce the graph transformation techniques used to projectivize and deprojectivize dependency graphs, and in section 3 we describe the data-driven dependency parser that is the core of our system.</S>",Results_Citation
2,P05-1013,P08-1006,0.0,0.0,"Sagae and Tsujii (2007)'s dependency parser, based on a probabilistic shift-reduce algorithm extended by the pseudo-projective parsing technique (Nivre and Nilsson, 2005)",['20'],"<S sid =""20"" ssid = ""16"">In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",Results_Citation
3,P05-1013,W10-1401,0.0,0.0,"Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque",['2'],"<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.</S>",Results_Citation
3,P05-1013,W10-1401,0.0,0.0,"Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque",['16'],"<S sid =""16"" ssid = ""12"">Still, from a theoretical point of view, projective parsing of non-projective structures has the drawback that it rules out perfect accuracy even as an asymptotic goal.</S>",Impact_Citation
3,P05-1013,W10-1401,0.0,0.0,"Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque",['18'],"<S sid =""18"" ssid = ""14"">In addition, there are several approaches to non-projective dependency parsing that are still to be evaluated in the large (Covington, 1990; Kahane et al., 1998; Duchier and Debusmann, 2001; Holan et al., 2001; Hellwig, 2003).</S>",Results_Citation
3,P05-1013,W10-1401,0.0,0.0,"Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque",['20'],"<S sid =""20"" ssid = ""16"">In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",Results_Citation
3,P05-1013,W10-1401,0.0,0.0,"Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque",['24'],"<S sid =""24"" ssid = ""20"">We call this pseudoprojective dependency parsing, since it is based on a notion of pseudo-projectivity (Kahane et al., 1998).</S>",Results_Citation
3,P05-1013,W10-1401,0.0,0.0,"Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque",['36'],"<S sid =""36"" ssid = ""7"">As observed by Kahane et al. (1998), any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation, which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.</S>",Method_Citation
3,P05-1013,W10-1401,0.0,0.0,"Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque",['104'],"<S sid =""104"" ssid = ""15"">The overall parsing accuracy obtained with the pseudo-projective approach is still lower than for the best projective parsers.</S>",Method_Citation
3,P05-1013,W10-1401,0.0,0.0,"Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque",['109'],"<S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>",Results_Citation
4,P05-1013,P12-3029,0.0,0.0,"For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)",['2'],"<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.</S>",Results_Citation
4,P05-1013,P12-3029,0.0,0.0,"For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)",['16'],"<S sid =""16"" ssid = ""12"">Still, from a theoretical point of view, projective parsing of non-projective structures has the drawback that it rules out perfect accuracy even as an asymptotic goal.</S>",Impact_Citation
4,P05-1013,P12-3029,0.0,0.0,"For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)",['20'],"<S sid =""20"" ssid = ""16"">In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",Results_Citation
4,P05-1013,P12-3029,0.0,0.0,"For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)",['109'],"<S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>",Results_Citation
5,P05-1013,W10-1403,0.0,0.0,"It uses graph transformation to handle non-projective trees (Nivre and Nilsson, 2005)",['2'],"<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.</S>",Results_Citation
5,P05-1013,W10-1403,0.0,0.0,"It uses graph transformation to handle non-projective trees (Nivre and Nilsson, 2005)",['20'],"<S sid =""20"" ssid = ""16"">In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",Results_Citation
5,P05-1013,W10-1403,0.0,0.0,"It uses graph transformation to handle non-projective trees (Nivre and Nilsson, 2005)",['36'],"<S sid =""36"" ssid = ""7"">As observed by Kahane et al. (1998), any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation, which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.</S>",Method_Citation
5,P05-1013,W10-1403,0.0,0.0,"It uses graph transformation to handle non-projective trees (Nivre and Nilsson, 2005)",['109'],"<S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>",Results_Citation
6,P05-1013,D08-1008,0.0,0.0,"To simplify implementation, we instead opted for the pseudo-projective approach (Nivre and Nilsson, 2005), in which non projective links are lifted upwards in the tree to achieve projectivity, and special trace labels are used to enable recovery of the non projective links at parse time",['20'],"<S sid =""20"" ssid = ""16"">In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",Results_Citation
7,P05-1013,D07-1013,0.0,0.0,"Nivre and Nilsson (2005) showed how the restriction to projective dependency graphs could be lifted by using graph transformation techniques to preprocess training data and post-process parser output, so-called pseudo-projective parsing",['2'],"<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.</S>",Results_Citation
7,P05-1013,D07-1013,0.0,0.0,"Nivre and Nilsson (2005) showed how the restriction to projective dependency graphs could be lifted by using graph transformation techniques to preprocess training data and post-process parser output, so-called pseudo-projective parsing",['20'],"<S sid =""20"" ssid = ""16"">In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",Results_Citation
7,P05-1013,D07-1013,0.0,0.0,"Nivre and Nilsson (2005) showed how the restriction to projective dependency graphs could be lifted by using graph transformation techniques to preprocess training data and post-process parser output, so-called pseudo-projective parsing",['22'],"<S sid =""22"" ssid = ""18"">When the parser is trained on the transformed data, it will ideally learn not only to construct projective dependency structures but also to assign arc labels that encode information about lifts.</S>",Impact_Citation
7,P05-1013,D07-1013,0.0,0.0,"Nivre and Nilsson (2005) showed how the restriction to projective dependency graphs could be lifted by using graph transformation techniques to preprocess training data and post-process parser output, so-called pseudo-projective parsing",['26'],"<S sid =""26"" ssid = ""22"">In section 2 we introduce the graph transformation techniques used to projectivize and deprojectivize dependency graphs, and in section 3 we describe the data-driven dependency parser that is the core of our system.</S>",Results_Citation
7,P05-1013,D07-1013,0.0,0.0,"Nivre and Nilsson (2005) showed how the restriction to projective dependency graphs could be lifted by using graph transformation techniques to preprocess training data and post-process parser output, so-called pseudo-projective parsing",['36'],"<S sid =""36"" ssid = ""7"">As observed by Kahane et al. (1998), any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation, which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.</S>",Method_Citation
7,P05-1013,D07-1013,0.0,0.0,"Nivre and Nilsson (2005) showed how the restriction to projective dependency graphs could be lifted by using graph transformation techniques to preprocess training data and post-process parser output, so-called pseudo-projective parsing",['109'],"<S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>",Results_Citation
8,P05-1013,D07-1119,0.0,0.0,"For handling non-projective relations, Nivre and Nilsson (2005) suggested applying a preprocessing step to a dependency parser, which consists in lifting non-projective arcs to their head repeatedly, until the tree becomes pseudo-projective",['13'],"<S sid =""13"" ssid = ""9"">The fact that projective dependency parsers can never exactly reproduce the analyses found in non-projective treebanks is often neglected because of the relative scarcity of problematic constructions.</S>",Method_Citation
8,P05-1013,D07-1119,0.0,0.0,"For handling non-projective relations, Nivre and Nilsson (2005) suggested applying a preprocessing step to a dependency parser, which consists in lifting non-projective arcs to their head repeatedly, until the tree becomes pseudo-projective",['20'],"<S sid =""20"" ssid = ""16"">In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",Results_Citation
8,P05-1013,D07-1119,0.0,0.0,"For handling non-projective relations, Nivre and Nilsson (2005) suggested applying a preprocessing step to a dependency parser, which consists in lifting non-projective arcs to their head repeatedly, until the tree becomes pseudo-projective",['36'],"<S sid =""36"" ssid = ""7"">As observed by Kahane et al. (1998), any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation, which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.</S>",Method_Citation
9,P05-1013,N07-1050,0.0,0.0,"The most popular strategy for capturing non projective structures in data-driven dependency parsing is to apply some kind of post-processing to the output of a strictly projective dependency parser, as in pseudo-projective parsing (Nivre and Nilsson, 2005), corrective modeling (Hall and Nova? k, 2005), or approximate non-projective parsing (McDonald and Pereira, 2006)",['109'],"<S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>",Results_Citation
10,P05-1013,W09-1207,0.0,0.0,"We adopt the pseudo-projective approach introduced in (Nivre and Nilsson, 2005) to handle the non-projective languages including Czech, German and English",['17'],"<S sid =""17"" ssid = ""13"">There exist a few robust broad-coverage parsers that produce non-projective dependency structures, notably Tapanainen and J¨arvinen (1997) and Wang and Harper (2004) for English, Foth et al. (2004) for German, and Holan (2004) for Czech.</S>",Results_Citation
13,P05-1013,C08-1081,0.0,0.0,"Pseudo-projective parsing for recovering non projective structures (Nivre and Nilsson, 2005)",['1'],"<S sid =""1"" ssid = ""1"">In order to realize the full potential of dependency-based syntactic parsing, it is desirable to allow non-projective dependency structures.</S>",Method_Citation
13,P05-1013,C08-1081,0.0,0.0,"Pseudo-projective parsing for recovering non projective structures (Nivre and Nilsson, 2005)",['2'],"<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.</S>",Results_Citation
13,P05-1013,C08-1081,0.0,0.0,"Pseudo-projective parsing for recovering non projective structures (Nivre and Nilsson, 2005)",['16'],"<S sid =""16"" ssid = ""12"">Still, from a theoretical point of view, projective parsing of non-projective structures has the drawback that it rules out perfect accuracy even as an asymptotic goal.</S>",Impact_Citation
13,P05-1013,C08-1081,0.0,0.0,"Pseudo-projective parsing for recovering non projective structures (Nivre and Nilsson, 2005)",['20'],"<S sid =""20"" ssid = ""16"">In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",Results_Citation
13,P05-1013,C08-1081,0.0,0.0,"Pseudo-projective parsing for recovering non projective structures (Nivre and Nilsson, 2005)",['24'],"<S sid =""24"" ssid = ""20"">We call this pseudoprojective dependency parsing, since it is based on a notion of pseudo-projectivity (Kahane et al., 1998).</S>",Results_Citation
13,P05-1013,C08-1081,0.0,0.0,"Pseudo-projective parsing for recovering non projective structures (Nivre and Nilsson, 2005)",['81'],"<S sid =""81"" ssid = ""8"">However, the overall percentage of non-projective arcs is less than 2% in PDT and less than 1% in DDT.</S>",Method_Citation
14,P05-1013,C08-1081,0.0,0.0,"Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)",['2'],"<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.</S>",Results_Citation
14,P05-1013,C08-1081,0.0,0.0,"Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)",['13'],"<S sid =""13"" ssid = ""9"">The fact that projective dependency parsers can never exactly reproduce the analyses found in non-projective treebanks is often neglected because of the relative scarcity of problematic constructions.</S>",Method_Citation
14,P05-1013,C08-1081,0.0,0.0,"Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)",['18'],"<S sid =""18"" ssid = ""14"">In addition, there are several approaches to non-projective dependency parsing that are still to be evaluated in the large (Covington, 1990; Kahane et al., 1998; Duchier and Debusmann, 2001; Holan et al., 2001; Hellwig, 2003).</S>",Results_Citation
14,P05-1013,C08-1081,0.0,0.0,"Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)",['20'],"<S sid =""20"" ssid = ""16"">In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",Results_Citation
14,P05-1013,C08-1081,0.0,0.0,"Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)",['24'],"<S sid =""24"" ssid = ""20"">We call this pseudoprojective dependency parsing, since it is based on a notion of pseudo-projectivity (Kahane et al., 1998).</S>",Results_Citation
14,P05-1013,C08-1081,0.0,0.0,"Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)",['36'],"<S sid =""36"" ssid = ""7"">As observed by Kahane et al. (1998), any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation, which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.</S>",Method_Citation
14,P05-1013,C08-1081,0.0,0.0,"Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)",['104'],"<S sid =""104"" ssid = ""15"">The overall parsing accuracy obtained with the pseudo-projective approach is still lower than for the best projective parsers.</S>",Method_Citation
14,P05-1013,C08-1081,0.0,0.0,"Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)",['109'],"<S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>",Results_Citation
15,P05-1013,C08-1081,0.0,0.0,Pseudo-projective parsing was proposed by Nivreand Nilsson (2005) as a way of dealing with non projective structures in a projective data-driven parser,['2'],"<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.</S>",Results_Citation
15,P05-1013,C08-1081,0.0,0.0,Pseudo-projective parsing was proposed by Nivreand Nilsson (2005) as a way of dealing with non projective structures in a projective data-driven parser,['16'],"<S sid =""16"" ssid = ""12"">Still, from a theoretical point of view, projective parsing of non-projective structures has the drawback that it rules out perfect accuracy even as an asymptotic goal.</S>",Impact_Citation
15,P05-1013,C08-1081,0.0,0.0,Pseudo-projective parsing was proposed by Nivreand Nilsson (2005) as a way of dealing with non projective structures in a projective data-driven parser,['20'],"<S sid =""20"" ssid = ""16"">In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",Results_Citation
15,P05-1013,C08-1081,0.0,0.0,Pseudo-projective parsing was proposed by Nivreand Nilsson (2005) as a way of dealing with non projective structures in a projective data-driven parser,['104'],"<S sid =""104"" ssid = ""15"">The overall parsing accuracy obtained with the pseudo-projective approach is still lower than for the best projective parsers.</S>",Method_Citation
15,P05-1013,C08-1081,0.0,0.0,Pseudo-projective parsing was proposed by Nivreand Nilsson (2005) as a way of dealing with non projective structures in a projective data-driven parser,['109'],"<S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>",Results_Citation
16,P05-1013,C08-1081,0.0,0.0,"We projectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r? h, where r is the original label and h is the label of the original head in the non-projective dependency graph",['22'],"<S sid =""22"" ssid = ""18"">When the parser is trained on the transformed data, it will ideally learn not only to construct projective dependency structures but also to assign arc labels that encode information about lifts.</S>",Impact_Citation
16,P05-1013,C08-1081,0.0,0.0,"We projectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r? h, where r is the original label and h is the label of the original head in the non-projective dependency graph",['36'],"<S sid =""36"" ssid = ""7"">As observed by Kahane et al. (1998), any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation, which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.</S>",Method_Citation
16,P05-1013,C08-1081,0.0,0.0,"We projectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r? h, where r is the original label and h is the label of the original head in the non-projective dependency graph",['37'],"<S sid =""37"" ssid = ""8"">Here we use a slightly different notion of lift, applying to individual arcs and moving their head upwards one step at a time: Intuitively, lifting an arc makes the word wk dependent on the head wi of its original head wj (which is unique in a well-formed dependency graph), unless wj is a root in which case the operation is undefined (but then wj —* wk is necessarily projective if the dependency graph is well-formed).</S>",Method_Citation
16,P05-1013,C08-1081,0.0,0.0,"We projectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r? h, where r is the original label and h is the label of the original head in the non-projective dependency graph",['40'],"<S sid =""40"" ssid = ""11"">Even this may be nondeterministic, in case the graph contains several non-projective arcs whose lifts interact, but we use the following algorithm to construct a minimal projective transformation D0 = (W, A0) of a (nonprojective) dependency graph D = (W, A): The function SMALLEST-NONP-ARC returns the non-projective arc with the shortest distance from head to dependent (breaking ties from left to right).</S>",Method_Citation
16,P05-1013,C08-1081,0.0,0.0,"We projectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r? h, where r is the original label and h is the label of the original head in the non-projective dependency graph",['49'],"<S sid =""49"" ssid = ""20"">The baseline simply retains the original labels for all arcs, regardless of whether they have been lifted or not, and the number of distinct labels is therefore simply the number n of distinct dependency types.2 In the first encoding scheme, called Head, we use a new label d↑h for each lifted arc, where d is the dependency relation between the syntactic head and the dependent in the non-projective representation, and h is the dependency relation that the syntactic head has to its own head in the underlying structure.</S>",Impact_Citation
16,P05-1013,C08-1081,0.0,0.0,"We projectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r? h, where r is the original label and h is the label of the original head in the non-projective dependency graph",['51'],"<S sid =""51"" ssid = ""22"">In the second scheme, Head+Path, we in addition modify the label of every arc along the lifting path from the syntactic to the linear head so that if the original label is p the new label is p↓.</S>",Method_Citation
16,P05-1013,C08-1081,0.0,0.0,"We projectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r? h, where r is the original label and h is the label of the original head in the non-projective dependency graph",['91'],"<S sid =""91"" ssid = ""2"">Table 5 shows the overall parsing accuracy attained with the three different encoding schemes, compared to the baseline (no special arc labels) and to training directly on non-projective dependency graphs.</S>",Results_Citation
17,P05-1013,D11-1006,0.0,0.0,"For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)",['2'],"<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.</S>",Results_Citation
17,P05-1013,D11-1006,0.0,0.0,"For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)",['16'],"<S sid =""16"" ssid = ""12"">Still, from a theoretical point of view, projective parsing of non-projective structures has the drawback that it rules out perfect accuracy even as an asymptotic goal.</S>",Impact_Citation
17,P05-1013,D11-1006,0.0,0.0,"For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)",['20'],"<S sid =""20"" ssid = ""16"">In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",Results_Citation
17,P05-1013,D11-1006,0.0,0.0,"For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)",['109'],"<S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>",Results_Citation
18,P05-1013,P11-2121,0.0,0.0,"Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases",['4'],"<S sid =""4"" ssid = ""4"">This leads to the best reported performance for robust non-projective parsing of Czech.</S>",Method_Citation
18,P05-1013,P11-2121,0.0,0.0,"Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases",['14'],"<S sid =""14"" ssid = ""10"">While the proportion of sentences containing non-projective dependencies is often 15–25%, the total proportion of non-projective arcs is normally only 1–2%.</S>",Method_Citation
18,P05-1013,P11-2121,0.0,0.0,"Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases",['18'],"<S sid =""18"" ssid = ""14"">In addition, there are several approaches to non-projective dependency parsing that are still to be evaluated in the large (Covington, 1990; Kahane et al., 1998; Duchier and Debusmann, 2001; Holan et al., 2001; Hellwig, 2003).</S>",Results_Citation
18,P05-1013,P11-2121,0.0,0.0,"Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases",['20'],"<S sid =""20"" ssid = ""16"">In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",Results_Citation
18,P05-1013,P11-2121,0.0,0.0,"Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases",['24'],"<S sid =""24"" ssid = ""20"">We call this pseudoprojective dependency parsing, since it is based on a notion of pseudo-projectivity (Kahane et al., 1998).</S>",Results_Citation
18,P05-1013,P11-2121,0.0,0.0,"Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases",['109'],"<S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>",Results_Citation
19,P05-1013,E06-1010,0.0,0.0,"It should be noted that the proportion of lost dependencies is about twice as high as the proportion of dependencies that are non-projective in themselves (Nivre and Nilsson, 2005)",['14'],"<S sid =""14"" ssid = ""10"">While the proportion of sentences containing non-projective dependencies is often 15–25%, the total proportion of non-projective arcs is normally only 1–2%.</S>",Method_Citation
19,P05-1013,E06-1010,0.0,0.0,"It should be noted that the proportion of lost dependencies is about twice as high as the proportion of dependencies that are non-projective in themselves (Nivre and Nilsson, 2005)",['80'],"<S sid =""80"" ssid = ""7"">As shown in Table 3, the proportion of sentences containing some non-projective dependency ranges from about 15% in DDT to almost 25% in PDT.</S>",Results_Citation
20,P05-1013,D07-1111,0.0,0.0,"The resulting algorithm is projective, and nonprojectivity is handled by pseudo-projective transformations as described in (Nivre and Nilsson, 2005)",['36'],"<S sid =""36"" ssid = ""7"">As observed by Kahane et al. (1998), any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation, which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.</S>",Method_Citation
