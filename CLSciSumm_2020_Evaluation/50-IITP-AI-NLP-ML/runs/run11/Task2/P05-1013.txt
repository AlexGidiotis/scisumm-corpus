even this may be nondeterministic, in case the graph contains several non-projective arcs whose lifts interact, but we use the following algorithm to construct a minimal projective transformation d0 = (w, a0) of a (nonprojective) dependency graph d = (w, a): the function smallest-nonp-arc returns the non-projective arc with the shortest distance from head to dependent (breaking ties from left to right).
in section 2 we introduce the graph transformation techniques used to projectivize and deprojectivize dependency graphs, and in section 3 we describe the data-driven dependency parser that is the core of our system.
the last four columns in table 3 show the distribution of nonprojective arcs with respect to the number of lifts required.
instead, we want to apply an inverse transformation to recover the underlying (nonprojective) dependency graph.
there exist a few robust broad-coverage parsers that produce non-projective dependency structures, notably tapanainen and jÂ¨arvinen (1997) and wang and harper (2004) for english, foth et al. (2004) for german, and holan (2004) for czech.
however, since we want to preserve as much of the original structure as possible, we are interested in finding a transformation that involves a minimal number of lifts.
in section 4 we evaluate these transformations with respect to projectivized dependency treebanks, and in section 5 they are applied to parser output.
experiments using data from the prague dependency treebank show that the combined system can handle nonprojective constructions with a precision sufficient to yield a significant improvement in overall parsing accuracy.
the increase is generally higher for pdt than for ddt, which indicates a greater diversity in non-projective constructions.
