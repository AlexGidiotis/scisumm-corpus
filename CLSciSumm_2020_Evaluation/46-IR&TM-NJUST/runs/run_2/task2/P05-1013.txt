This may seem surprising, given the experiments reported in section 4, but the explanation is probably that the non-projective dependencies that can be recovered at all are of the simple kind that only requires a single lift, where the encoding of path information is often redundant.The overall parsing accuracy obtained with the pseudo-projective approach is still lower than for the best projective parsers.In section 4 we evaluate these transformations with respect to projectivized dependency treebanks, and in section 5 they are applied to parser output.Before we turn to the evaluation, however, we need to introduce the data-driven dependency parser used in the latter experiments.Thus, most broad-coverage parsers based on dependency grammar have been restricted to projective structures.First, in section 4, we evaluate the graph transformation techniques in themselves, with data from the Prague Dependency Treebank and the Danish Dependency Treebank.However, since we want to preserve as much of the original structure as possible, we are interested in finding a transformation that involves a minimal number of lifts.The parser builds dependency graphs by traversing the input from left to right, using a stack to store tokens that are not yet complete with respect to their dependents.In the third and final scheme, denoted Path, we keep the extra infor2Note that this is a baseline for the parsing experiment only (Experiment 2).